#!/usr/bin/env python
# -*- coding: utf-8 -*-

################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################


import rospy
import rospkg
from math import pow, atan2, sqrt
from tf.transformations import *
import tf

import smach
from std_msgs.msg import String

# Manipulator 
from open_manipulator_msgs.msg import JointPosition
from open_manipulator_msgs.msg import KinematicsPose
from open_manipulator_msgs.msg import OpenManipulatorState
from open_manipulator_msgs.srv import SetJointPosition
from open_manipulator_msgs.srv import SetKinematicsPose
from open_manipulator_msgs.srv import GetJointPosition
from open_manipulator_msgs.srv import GetKinematicsPose

import time
from sensor_msgs.msg import JointState
from geometry_msgs.msg import PoseArray, Pose


 
class PickAndPlaceByOpenCV():
    def __init__(self):
        self.namespace = rospy.get_param("~robot_name")
        self.planning_group = rospy.get_param("~planning_group")
        self.use_platform = rospy.get_param("~use_platform")       

        self.set_joint_position = rospy.ServiceProxy('/open_manipulator/goal_joint_space_path', SetJointPosition)
        self.set_kinematics_position = rospy.ServiceProxy('/open_manipulator/goal_task_space_path_position_only', SetKinematicsPose)

        self.open_manipulator_joint_states_sub_ = rospy.Subscriber('/open_manipulator/joint_states', JointState, self.jointStatesCallback)
        self.open_manipulator_kinematics_pose_sub_ = rospy.Subscriber('/open_manipulator/gripper/kinematics_pose', KinematicsPose, self.kinematicsPoseCallback)
        self.open_manipulator_states_ = rospy.Subscriber('/open_manipulator/states', OpenManipulatorState, self.StatesCallback)

        self.last_detect_time = rospy.get_rostime()

        loop_rate = rospy.Rate(10) # 10hz
        while not rospy.is_shutdown():
            pass            
            loop_rate.sleep()

    def jointStatesCallback(self, msg):
	#rospy.logwarn('jointStatesCallback %d ', len(msg.position) )
        for i, pose in enumerate(msg.position):
            self.jointStates[i] = pose
            #print 'boundingBoxe {} {} '.format(i, pose) 
 
    def kinematicsPoseCallback(self, msg):
        self.kinematicsStates[0] = msg.pose.position.x
        self.kinematicsStates[1] = msg.pose.position.y
        self.kinematicsStates[2] = msg.pose.position.z
        #rospy.logwarn(' kinematicsPoseCallback %.2f , %.2f, %.2f  ', self.kinematicsStates[0], self.kinematicsStates[1], self.kinematicsStates[2] )
                     
    def jointStatesCallback(self, msg):
	#rospy.logwarn('jointStatesCallback %d ', len(msg.position) )
        for i, pose in enumerate(msg.position):
            self.jointStates[i] = pose
            #print 'boundingBoxe {} {} '.format(i, pose)

    def stop_movement(self, userdata):
        joint_position = JointPosition()
        joint_position.joint_name = ['joint1','joint2','joint3','joint4']  
        joint_position.position =  [0, 0, 0, 0]
        planning_group = userdata.input_planning_group
        try:    
            path_time = 1                    
            resp1 = self.set_joint_position_from_present(planning_group,joint_position, path_time)
            rospy.sleep(path_time)
        except rospy.ServiceException, e:
            print "Service call failed: %s"%e            

    def main(self):
        rospy.spin()
        
if __name__ == '__main__':
    rospy.init_node('pick_and_place_by_opencv')
    node = PickAndPlaceByOpenCV()
    node.main()



            elif self.step == self.StepCupTracking.go_tf_location_of_cup.value:
                rospy.logwarn("go_tf_location_of_cup")

                kinematics_pose.pose.position.x =  cup_tf[0]
                kinematics_pose.pose.position.y =  cup_tf[1]
                kinematics_pose.pose.position.z =  cup_tf[2]
                distance = math.sqrt(cup_tf[0]**2 + cup_tf[1]**2 + cup_tf[2]**2)
                operating_time = distance * 7 / 0.6
                rospy.logwarn("go kinemetics xyz  %.2f,%.2f,%.2f _ time %.3f, dis %.3f",cup_tf[0],cup_tf[1],cup_tf[2],operating_time, distance)
                if operating_time < 3 :
                    operating_time = 3 
                try: 
                    resp1 = self.set_kinematics_position(planning_group, end_effector_name, kinematics_pose, operating_time)
	            print 'kinemetics resp1 {} time '.format(resp1.is_planned, operating_time) 
                    rospy.sleep(0.1)
                except rospy.ServiceException, e:
                    print "Service call failed: %s"%e

                self.pre_step = self.StepCupTracking.go_tf_location_of_cup.value
                self.step = self.StepCupTracking.wait_finish_movement.value    
